{"ast":null,"code":"var _jsxFileName = \"C:\\\\React\\\\contact-management\\\\src\\\\components\\\\contacts\\\\EditContact.js\";\nimport React, { Component } from 'react';\nimport { Consumer } from '../../context';\nimport TextInputGroup from '../layout/TextInputGroup';\nimport axios from 'axios';\n\nclass EditContact extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      name: '',\n      email: '',\n      phone: '',\n      errors: {}\n    };\n\n    this.onSubmit = async (dispatch, e) => {\n      e.preventDefault();\n      const _this$state = this.state,\n            name = _this$state.name,\n            email = _this$state.email,\n            phone = _this$state.phone; // Check For Errors\n\n      if (name === '') {\n        this.setState({\n          errors: {\n            name: 'Name is required'\n          }\n        });\n        return;\n      }\n\n      if (email === '') {\n        this.setState({\n          errors: {\n            email: 'Email is required'\n          }\n        });\n        return;\n      }\n\n      if (phone === '') {\n        this.setState({\n          errors: {\n            phone: 'Phone is required'\n          }\n        });\n        return;\n      }\n\n      const updContact = {\n        name,\n        email,\n        phone\n      };\n      const id = this.props.match.params.id;\n      const res = await axios.put(\"https://jsonplaceholder.typicode.com/users/\".concat(id), updContact);\n      dispatch({\n        type: 'UPDATE_CONTACT',\n        payload: res.data\n      }); // Clear State\n\n      this.setState({\n        name: '',\n        email: '',\n        phone: '',\n        errors: {}\n      });\n      this.props.history.push('/');\n    };\n\n    this.onChange = e => this.setState({\n      [e.target.name]: e.target.value\n    });\n  }\n\n  async componentDidMount() {\n    const id = this.props.match.params.id;\n    const res = await axios.get(\"https://jsonplaceholder.typicode.com/users/\".concat(id));\n    const contact = res.data;\n    this.setState({\n      name: contact.name,\n      email: contact.email,\n      phone: contact.phone\n    });\n  }\n\n  render() {\n    const _this$state2 = this.state,\n          name = _this$state2.name,\n          email = _this$state2.email,\n          phone = _this$state2.phone,\n          errors = _this$state2.errors;\n    return React.createElement(Consumer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, value => {\n      const dispatch = value.dispatch;\n      return React.createElement(\"div\", {\n        className: \"card mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"card-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, \"Edit Contact\"), React.createElement(\"div\", {\n        className: \"card-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        onSubmit: this.onSubmit.bind(this, dispatch),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(TextInputGroup, {\n        label: \"Name\",\n        name: \"name\",\n        placeholder: \"Enter Name\",\n        value: name,\n        onChange: this.onChange,\n        error: errors.name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }), React.createElement(TextInputGroup, {\n        label: \"Email\",\n        name: \"email\",\n        type: \"email\",\n        placeholder: \"Enter Email\",\n        value: email,\n        onChange: this.onChange,\n        error: errors.email,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }), React.createElement(TextInputGroup, {\n        label: \"Phone\",\n        name: \"phone\",\n        placeholder: \"Enter Phone\",\n        value: phone,\n        onChange: this.onChange,\n        error: errors.phone,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"submit\",\n        value: \"Update Contact\",\n        className: \"btn btn-light btn-block\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }))));\n    });\n  }\n\n}\n\nexport default EditContact;","map":{"version":3,"sources":["C:/React/contact-management/src/components/contacts/EditContact.js"],"names":["React","Component","Consumer","TextInputGroup","axios","EditContact","state","name","email","phone","errors","onSubmit","dispatch","e","preventDefault","setState","updContact","id","props","match","params","res","put","type","payload","data","history","push","onChange","target","value","componentDidMount","get","contact","render","bind"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Consumer } from '../../context';\nimport TextInputGroup from '../layout/TextInputGroup';\nimport axios from 'axios';\n\nclass EditContact extends Component {\n  state = {\n    name: '',\n    email: '',\n    phone: '',\n    errors: {}\n  };\n\n  async componentDidMount() {\n    const { id } = this.props.match.params;\n    const res = await axios.get(\n      `https://jsonplaceholder.typicode.com/users/${id}`\n    );\n\n    const contact = res.data;\n\n    this.setState({\n      name: contact.name,\n      email: contact.email,\n      phone: contact.phone\n    });\n  }\n\n  onSubmit = async (dispatch, e) => {\n    e.preventDefault();\n\n    const { name, email, phone } = this.state;\n\n    // Check For Errors\n    if (name === '') {\n      this.setState({ errors: { name: 'Name is required' } });\n      return;\n    }\n\n    if (email === '') {\n      this.setState({ errors: { email: 'Email is required' } });\n      return;\n    }\n\n    if (phone === '') {\n      this.setState({ errors: { phone: 'Phone is required' } });\n      return;\n    }\n\n    const updContact = {\n      name,\n      email,\n      phone\n    };\n\n    const { id } = this.props.match.params;\n\n    const res = await axios.put(\n      `https://jsonplaceholder.typicode.com/users/${id}`,\n      updContact\n    );\n\n    dispatch({ type: 'UPDATE_CONTACT', payload: res.data });\n\n    // Clear State\n    this.setState({\n      name: '',\n      email: '',\n      phone: '',\n      errors: {}\n    });\n\n    this.props.history.push('/');\n  };\n\n  onChange = e => this.setState({ [e.target.name]: e.target.value });\n\n  render() {\n    const { name, email, phone, errors } = this.state;\n\n    return (\n      <Consumer>\n        {value => {\n          const { dispatch } = value;\n          return (\n            <div className=\"card mb-3\">\n              <div className=\"card-header\">Edit Contact</div>\n              <div className=\"card-body\">\n                <form onSubmit={this.onSubmit.bind(this, dispatch)}>\n                  <TextInputGroup\n                    label=\"Name\"\n                    name=\"name\"\n                    placeholder=\"Enter Name\"\n                    value={name}\n                    onChange={this.onChange}\n                    error={errors.name}\n                  />\n                  <TextInputGroup\n                    label=\"Email\"\n                    name=\"email\"\n                    type=\"email\"\n                    placeholder=\"Enter Email\"\n                    value={email}\n                    onChange={this.onChange}\n                    error={errors.email}\n                  />\n                  <TextInputGroup\n                    label=\"Phone\"\n                    name=\"phone\"\n                    placeholder=\"Enter Phone\"\n                    value={phone}\n                    onChange={this.onChange}\n                    error={errors.phone}\n                  />\n                  <input\n                    type=\"submit\"\n                    value=\"Update Contact\"\n                    className=\"btn btn-light btn-block\"\n                  />\n                </form>\n              </div>\n            </div>\n          );\n        }}\n      </Consumer>\n    );\n  }\n}\n\nexport default EditContact;\n"]},"metadata":{},"sourceType":"module"}